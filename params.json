{"name":"Module-init-tools","tagline":"Mirror of git://git.kernel.org/pub/scm/utils/kernel/module-init-tools/module-init-tools.git","body":"module-init-tools - Linux userspace module loading utilities\r\n------------------------------------------------------------\r\n\r\nNOTE: module-init-tools is due to be replaced with a new utility, which will\r\n      be based upon the \"libkmod\" (kmod) codebase, unified with this one. To\r\n      join in the fun, see #kmod on Freenode, and the mailing list. Consider\r\n      progress of this new project before embarking on new development here.\r\n      Once the replacement is ready, the existing codebase will be obsolete.\r\n\r\nHandy Resources:\r\n\t- Bugs: Please send email to list\r\n\t- Git:  git://git.kernel.org/pub/scm/utils/kernel/module-init-tools/module-init-tools.git\r\n\t- IRC:  irc.freenode.org/#module-init-tools\r\n\t- Mail: linux-modules@vger.kernel.org\r\n\t- Web:  http://modules.wiki.kernel.org/\r\n\r\nThe module-init-tools are used by modern 2.6 series Linux systems to provide\r\nuserspace-side assistance in loading kernel modules and their dependencies.\r\nOriginally written to replace the older \"modutils\", the utilities include\r\nthe \"modprobe\" (load modules and their dependencies), \"insmod\" (load just\r\na single module), \"modinfo\" (retrieve module information), and other related\r\nmodule management commands. These are intended to be relatively lightweight\r\nin their design, since 2.6 series kernels do much of the work internally.\r\n\r\nYou will find documentation within the man pages and in this README file,\r\nas well as some hints on development within the HACKING file. You are\r\nencouraged to get involved by signing up to the linux-modules@vger.kernel.org\r\nproject mailing list, and posting patches (git pull requests are welcome).\r\nYou can also find further information, including the address of the mailing\r\nlist, this git repository, and so forth on the module-init-tools wiki.\r\n\r\nDevelopment takes place against the latest upstream Linux kernels (2.6.33\r\nas of this writing, though kernel development moves quickly). Backward\r\ncompatibility is generally attempted, but forward compatibility (i.e. the\r\nability for a specific release of module-init-tools to work against data\r\nfiles created by a later version as yet unreleased version) is not. In\r\nparticular, the generated data files within /lib/modules/<kernel version>\r\nmust not be assumed to have any particular format, nor should they be\r\nparsed be any other tools. There is a specific \"modinfo\" utility intended\r\nfor the purposes of providing the information stored within those files.\r\n\r\nRecent Changes:\r\n\t- There is no backwards compatibility for pre-2.6 series kernels. If\r\n\t  you intend to use an older kernel (wherein the module utilities\r\n\t  must perform various linking stages in userspace), use an older\r\n\t  tool such as provided in the \"modutils\" legacy kernel package.\r\n\r\n\t- Explicit locking of kernel modules is no longer being performed at\r\n\t  load time (the existing implementation required a writeable mount\r\n\t  in /lib/modules that is by no means assured - an alternative of\r\n\t  using SYSV locks was experimented with but deemed unnecessary).\r\n\t  The kernel will handle one modprobe instance racing with another\r\n\t  by denying the load and returning an error message.\r\n\r\nWork in progress:\r\n\t- We are working on soft-dependency support that will allow modules\r\n\t  to provide hints as to dependencies that may not be explicit.\r\n\r\nRequirements:\r\n\t- A 2.6 series Linux kernel with sysfs, procfs, and loadable module\r\n\t  support enabled in the kernel configuration. It is also required\r\n\t  that sysfs and procfs be mounted in their usual /proc and /sys\r\n\t  locations in order for certain functionality to be provided.\r\n\r\n\t- Module remove support must be enabled if removing is required. Yo\r\n\t  can also enable other options such as forced removal, but this is\r\n\t  really a bad idea for anything other than development.\r\n\r\n\t- Module versioning (MODVERSIONS) must be enabled if you would\r\n\t  like to try to use modules from one kernel with another, similar\r\n\t  one without the kernel complaining loudly at the difference.\r\n\r\nQuickstart:\r\n\t- Make sure you have appropriate development tools (gcc, GNU autotools,\r\n\t  docbook2man, etc. Some distributions may require optional packages\r\n\t  for a static version of glibc, as an example).\r\n\r\n\t- To begin hacking on module-init-tools, you can do the following:\r\n\r\n\t1). aclocal -I m4 && automake --add-missing --copy && autoconf\r\n\t    (or run \"autoreconf\" from an existing setup)\r\n\t2). ./configure\r\n\t    (optionally specify \"--prefix\" or \"--mandir\" for non /usr/local)\r\n\t3). make\r\n\t4). make install\r\n\t5). depmod\r\n\t    (to update /lib/modules/<kernel version> for the latest release)\r\n\r\nPlease direct any comment/question to the linux-modules mailing list at:\r\n\tlinux-modules@vger.kernel.org\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}